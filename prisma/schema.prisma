// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URLs")
}

model User {
  id                   Int      @id @default(autoincrement())
  username             String   @unique
  fullName             String?  @map("full_name")
  email                String?
  countryCode          String   @map("country_code")
  phoneNumber          String   @unique @map("phone_number")
  formattedPhoneNumber String   @unique @map("formatted_phone_number")
  image                String?
  userType             UserType @relation(fields: [userTypeId], references: [id])
  userTypeId           Int      @map("user_type_id")

  createdAt DateTime @default(now())

  Game             Game[]
  UserPoints       UserPoints[]
  WeeklyPrize      WeeklyPrize[]
  PrizeClaim       PrizeClaim[]
  PushNotification PushNotification[]
  TournamentUser   TournamentUser[]
  TournamentGame   TournamentGame[]
  TournamentWinner TournamentWinner[]
  TournamentReward TournamentReward[]
  DailyReward      DailyReward[]
  Redeem           Redeem[]
}

model Question {
  id               Int               @id @default(autoincrement())
  text             String
  time             Int
  choice_one       String            @db.Text
  choice_two       String            @db.Text
  choice_three     String            @db.Text
  choice_four      String            @db.Text
  answer           String
  questionType     QuestionType      @relation(fields: [questionTypeId], references: [id])
  questionTypeId   Int
  QuestionCategory QuestionCategory? @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  GameQuestion     GameQuestion[]
}

model ChallengeTime {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  daily     Boolean  @default(false)
  startTime DateTime @db.Time(3)
  endTime   DateTime @db.Time(3)

  @@map("challenge_time")
}

model Game {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int

  WeeklyChallenge     WeeklyChallenge @relation(fields: [weeklyChallengeId], references: [id])
  weeklyChallengeId   Int             @map("weekly_challenge_id")
  challengeIdentifier String

  timeAvailable   Int?
  pointsAvailable Int?
  pointsObtained  Int?
  correctAnswers  Int?           @map("correct_answers")
  wrongAnswers    Int?           @map("wrong_answers")
  skipped         Int?
  percent         Float?
  initiatedAt     DateTime       @default(now())
  nextGameAt      DateTime?      @map("next_game_at")
  submittedAt     DateTime?
  gameQuestions   GameQuestion[]
}

model GameQuestion {
  id         Int      @id @default(autoincrement())
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  correct    Boolean?
  createdAt  DateTime @default(now())

  TournamentTriviaQuestions   TournamentTriviaQuestions? @relation(fields: [tournamentTriviaQuestionsId], references: [id])
  tournamentTriviaQuestionsId Int?
  @@map("game_question")
}

model Prize {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  description String
  brand       String?
  brandUrl    String?   @map("brand_url")
  points      Int
  UserType    UserType? @relation(fields: [userTypeId], references: [id])
  userTypeId  Int?      @map("user_type_id")

  available   Boolean?      @default(false)
  WeeklyPrize WeeklyPrize[]
}

model Tournament {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String?
  image               String?
  start_date          DateTime @db.Date
  end_date            DateTime @db.Date
  registration_closes DateTime
  start_time          DateTime @db.Time(3)
  end_time            DateTime @db.Time(3)
  daily_points        Int
  entry_fee           Int
  max_players         Int
  created_at          DateTime @default(now())

  TournamentUser     TournamentUser[]
  TournamentGame     TournamentGame[]
  TournamentReward   TournamentReward[]
  TournamentCategory TournamentCategory[]
  TournamentMode     TournamentMode[]
}

model TournamentCategory {
  id Int @id @default(autoincrement())

  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int        @map("tournament_id")

  QuestionCategory QuestionCategory @relation(fields: [categoryId], references: [id])
  categoryId       Int              @map("category_id")

  @@map("tournament_category")
}

model GameMode {
  id    Int    @id @default(autoincrement())
  name  String @unique
  lives Int

  easy         Int
  intermediate Int
  hard         Int
  bonus        Int

  TournamentGame TournamentGame[]
  TournamentMode TournamentMode[]
  @@map("game_mode")
}

model TournamentMode {
  id Int @id @default(autoincrement())

  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int        @map("tournament_id")

  GameMode       GameMode         @relation(fields: [gameModeId], references: [id])
  gameModeId     Int              @map("game_mode_id")
  TournamentGame TournamentGame[]

  @@map("tournament_mode")
}

model TournamentUser {
  id Int @id @default(autoincrement())

  User   User @relation(fields: [userId], references: [id])
  userId Int

  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int

  created_at DateTime @default(now())

  @@map("tournament_user")
}

model TournamentGame {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int        @map("tournament_id")

  TournamentMode   TournamentMode @relation(fields: [tournamentModeId], references: [id])
  tournamentModeId Int            @map("tournament_mode_id")

  timeAvailable   Int?      @map("time_available")
  pointsAvailable Int?      @map("points_available")
  pointsObtained  Int?      @map("points_obtained")
  correctAnswers  Int?      @map("correct_answers")
  wrongAnswers    Int?      @map("wrong_answers")
  skipped         Int?
  percent         Float?
  initiatedAt     DateTime  @default(now()) @map("initiated_at")
  nextGameAt      DateTime? @map("next_game_at")
  submittedAt     DateTime? @map("submitted_at")

  TournamentQuestion TournamentQuestion[]
  GameMode           GameMode?            @relation(fields: [gameModeId], references: [id])
  gameModeId         Int?
  @@map("tournament_game")
}

model TournamentTriviaQuestions {
  id                 Int                  @id @default(autoincrement())
  text               String
  time               Int
  choice_one         String               @db.Text
  choice_two         String               @db.Text
  choice_three       String               @db.Text
  choice_four        String               @db.Text
  answer             String
  questionType       QuestionType         @relation(fields: [questionTypeId], references: [id])
  questionTypeId     Int
  QuestionCategory   QuestionCategory?    @relation(fields: [categoryId], references: [id])
  categoryId         Int?
  GameQuestion       GameQuestion[]
  TournamentQuestion TournamentQuestion[]

  @@map("tournament_trivia_questions")
}

model TournamentQuestion {
  id Int @id @default(autoincrement())

  TournamentGame   TournamentGame @relation(fields: [tournamentGameId], references: [id])
  tournamentGameId Int

  time Int?

  question   TournamentTriviaQuestions @relation(fields: [questionId], references: [id])
  questionId Int
  correct    Boolean?
  createdAt  DateTime                  @default(now())

  @@map("tournament_question")
}

model TournamentReward {
  id       Int @id @default(autoincrement())
  position Int

  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int        @map("tournament_id")

  Reward   Reward @relation(fields: [rewardId], references: [id])
  rewardId Int

  createdAt  DateTime     @default(now())
  PrizeClaim PrizeClaim[]

  User             User?              @relation(fields: [userId], references: [id])
  userId           Int?
  TournamentWinner TournamentWinner[]
  @@map("tournament_reward")
}

model TournamentWinner {
  id Int @id @default(autoincrement())

  TournamentReward   TournamentReward @relation(fields: [tournamentRewardId], references: [id])
  tournamentRewardId Int

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  claimed     Boolean   @default(false)
  dateClaimed DateTime?

  createdAt DateTime @default(now())
  @@map("tournament_winner")
}

model DailyReward {
  id Int @id @default(autoincrement())

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  points Int?  @default(250)

  createdAt DateTime @default(now())

  @@map("daily_reward")
}

model Brand {
  id      Int    @id @default(autoincrement())
  name    String
  image   String
  website String

  address String
  city    String
  eircode String?

  createdAt DateTime @default(now())
  Ad        Ad[]
  Reward    Reward[]
}

model RewardType {
  id Int @id @default(autoincrement())

  name String

  Reward Reward[]
  @@map("reward_type")
}

model Reward {
  id Int @id @default(autoincrement())

  Brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  name        String
  description String?
  terms       String?
  points      Int

  UserType   UserType? @relation(fields: [userTypeId], references: [id])
  userTypeId Int?      @map("user_type_id")

  RewardType   RewardType? @relation(fields: [rewardTypeId], references: [id])
  rewardTypeId Int?        @map("reward_type_id")

  available Boolean? @default(false)

  createdAt        DateTime           @default(now())
  GiftCard         GiftCard[]
  Redeem           Redeem[]
  TournamentReward TournamentReward[]
}

model Redeem {
  id Int @id @default(autoincrement())

  User   User @relation(fields: [userId], references: [id])
  userId Int

  Reward   Reward @relation(fields: [rewardId], references: [id])
  rewardId Int

  GiftCard   GiftCard? @relation(fields: [giftCardId], references: [id])
  giftCardId Int?

  createdAt DateTime @default(now())
}

model GiftCard {
  id Int @id @default(autoincrement())

  Reward   Reward @relation(fields: [rewardId], references: [id])
  rewardId Int

  value Int
  code  String

  createdAt DateTime @default(now())

  Redeem Redeem[]
  @@map("gift_card")
}

model Ad {
  id Int @id @default(autoincrement())

  Brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  text  String
  cta   String
  url   String
  color String

  active Boolean? @default(false)

  createdAt DateTime @default(now())
}

model WeeklyChallenge {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime?
  endDate   DateTime
  createdAt DateTime  @default(now())

  WeeklyPrize WeeklyPrize[]
  Game        Game[]
  @@map("weekly_challenge")
}

model PushNotification {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  deviceToken String
  active      Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("push_notification")
}

model WeeklyPrize {
  id       Int @id @default(autoincrement())
  position Int

  WeeklyChallenge   WeeklyChallenge @relation(fields: [weeklyChallengeId], references: [id])
  weeklyChallengeId Int             @map("weekly_challenge_id")

  Prize   Prize @relation(fields: [prizeId], references: [id])
  prizeId Int

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  claimed     Boolean   @default(false)
  dateClaimed DateTime?

  createdAt  DateTime     @default(now())
  PrizeClaim PrizeClaim[]
  @@map("weekly_prize")
}

model PrizeClaim {
  id            Int         @id @default(autoincrement())
  WeeklyPrize   WeeklyPrize @relation(fields: [weeklyPrizeId], references: [id])
  weeklyPrizeId Int         @unique @map("weekly_prize_id")

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  fullname       String
  phoneNumber    String  @map("phone_number")
  addressLineOne String  @map("address_line_one")
  addressLineTwo String? @map("address_line_two")
  city           String
  eircode        String?

  claimed     Boolean   @default(false)
  dateClaimed DateTime?

  sent     Boolean   @default(false)
  dateSent DateTime?

  delivered     Boolean   @default(false)
  dateDelivered DateTime?

  createdAt          DateTime          @default(now())
  TournamentReward   TournamentReward? @relation(fields: [tournamentRewardId], references: [id])
  tournamentRewardId Int?
  @@map("prize_claim")
}

model QuestionCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  Question Question[]

  TournamentCategory        TournamentCategory[]
  TournamentTriviaQuestions TournamentTriviaQuestions[]
  @@map("question_category")
}

model QuestionType {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  points   Int
  question Question[]

  TournamentTriviaQuestions TournamentTriviaQuestions[]
  @@map("question_type")
}

model UserType {
  id       Int    @id @default(autoincrement())
  name     String @unique
  minGames Int

  User   User[]
  Prize  Prize[]
  Reward Reward[]
  @@map("user_type")
}

model UserPoints {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  source    Source   @default(REGISTRATION)
  points    Int

  @@map("user_points")
  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Test {
  id   Int    @id @default(autoincrement())
  name String

  @@map("test")
}

enum Source {
  REGISTRATION
  GAME
  DAILY_REWARD
  TOURNAMENT
}
