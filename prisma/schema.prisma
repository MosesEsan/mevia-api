// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URLs")
}

model User {
  id                   Int                @id @default(autoincrement())
  username             String             @unique
  countryCode          String             @map("country_code")
  phoneNumber          String             @unique @map("phone_number")
  formattedPhoneNumber String             @unique @map("formatted_phone_number")
  image                String?
  userType             UserType           @relation(fields: [userTypeId], references: [id])
  userTypeId           Int                @map("user_type_id")
  Game                 Game[]
  UserPoints           UserPoints[]
  WeeklyPrize          WeeklyPrize[]
  PrizeClaim           PrizeClaim[]
  PushNotification     PushNotification[]
}

model Question {
  id             Int            @id @default(autoincrement())
  text           String
  time           Int
  choice_one     String         @db.Text
  choice_two     String         @db.Text
  choice_three   String         @db.Text
  choice_four    String         @db.Text
  answer         String
  questionType   QuestionType   @relation(fields: [questionTypeId], references: [id])
  questionTypeId Int
  GameQuestion   GameQuestion[]
}

model ChallengeTime {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  daily     Boolean  @default(false)
  startTime DateTime @db.Time(3)
  endTime   DateTime @db.Time(3)

  @@map("challenge_time")
}

model Game {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int

  WeeklyChallenge     WeeklyChallenge @relation(fields: [weeklyChallengeId], references: [id])
  weeklyChallengeId   Int             @map("weekly_challenge_id")
  challengeIdentifier String

  timeAvailable   Int?
  pointsAvailable Int?
  pointsObtained  Int?
  correctAnswers  Int?           @map("correct_answers")
  wrongAnswers    Int?           @map("wrong_answers")
  skipped         Int?
  percent         Float?
  initiatedAt     DateTime       @default(now())
  nextGameAt      DateTime?      @db.Time(3)
  submittedAt     DateTime?
  gameQuestions   GameQuestion[]
}

model GameQuestion {
  id         Int      @id @default(autoincrement())
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  correct    Boolean?
  createdAt  DateTime @default(now())

  @@map("game_question")
}

model Prize {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  description String
  points      Int
  UserType    UserType? @relation(fields: [userTypeId], references: [id])
  userTypeId  Int?      @map("user_type_id")


  available   Boolean?      @default(false)
  WeeklyPrize WeeklyPrize[]
}

model WeeklyChallenge {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime?
  endDate   DateTime
  createdAt DateTime  @default(now())

  WeeklyPrize WeeklyPrize[]
  Game        Game[]
  @@map("weekly_challenge")
}

model PushNotification {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  deviceToken String
  active      Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("push_notification")
}

model WeeklyPrize {
  id       Int @id @default(autoincrement())
  position Int

  WeeklyChallenge   WeeklyChallenge @relation(fields: [weeklyChallengeId], references: [id])
  weeklyChallengeId Int             @map("weekly_challenge_id")

  Prize   Prize @relation(fields: [prizeId], references: [id])
  prizeId Int

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  claimed     Boolean   @default(false)
  dateClaimed DateTime?

  createdAt  DateTime     @default(now())
  PrizeClaim PrizeClaim[]
  @@map("weekly_prize")
}

model PrizeClaim {
  id            Int         @id @default(autoincrement())
  WeeklyPrize   WeeklyPrize @relation(fields: [weeklyPrizeId], references: [id])
  weeklyPrizeId Int         @unique @map("weekly_prize_id")

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  fullname       String
  phoneNumber    String  @map("phone_number")
  addressLineOne String  @map("address_line_one")
  addressLineTwo String? @map("address_line_two")
  city           String
  eircode        String?

  claimed     Boolean   @default(false)
  dateClaimed DateTime?

  sent     Boolean   @default(false)
  dateSent DateTime?

  delivered     Boolean   @default(false)
  dateDelivered DateTime?

  createdAt DateTime @default(now())
  @@map("prize_claim")
}

model QuestionType {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  points   Int
  question Question[]

  @@map("question_type")
}

model UserType {
  id       Int    @id @default(autoincrement())
  name     String @unique
  minGames Int

  User  User[]
  Prize Prize[]
  @@map("user_type")
}

model UserPoints {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  source     Source   @default(REGISTRATION)
  points     Int
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int

  @@map("user_points")
}

enum Source {
  REGISTRATION
  GAME
  DAILY_REWARD
}
